// ===================================================================
// Flexbox Grid Mixins
// Version 0.1.3
// Description: Sass Mixins to generate Flexbox grid
// Author: thingsym
// GitHub: https://github.com/thingsym/flexbox-grid-mixins
// MIT License
// ===================================================================

@charset 'utf-8';

@mixin grid(
  $display: flex,
  $flex-direction: null,
  $flex-wrap: wrap,
  $flex-flow: null,
  $justify-content: null,
  $align-items: null,
  $align-content: null,
  $gutter: 1em,
  $grid-type: skeleton
) {
  box-sizing: border-box;

  @if $display {
    display: $display;
  }

  @if $flex-direction {
    flex-direction: $flex-direction;
  }
  @if $flex-wrap {
    flex-wrap: $flex-wrap;
  }

  @if $flex-flow {
    flex-flow: $flex-flow;
  }

  @if $justify-content {
    justify-content: $justify-content;
  }
  @if $align-items {
    align-items: $align-items;
  }
  @if $align-content {
    align-content: $align-content;
  }

  @if $grid-type == skeleton {
    @if $gutter {
      @include grid-margin($margin: 0 $gutter / 2 * -1);
    }
  }

  @content;
}

@mixin grid-col(
  $col: null,
  $grid-columns: 12,
  $col-offset: null,
  $gutter: 1em,
  $condensed: false,
  $align-self: null,
  $flex-grow: 0,
  $flex-shrink: 1,
  $flex-basis: auto,
  $order: null,
  $grid-type: skeleton,
  $last-child: false
) {
  box-sizing: border-box;

  @if type-of($col) == number and unitless($col) == true {
    $flex-grow: 0;
    $flex-shrink: 0;
    $flex-basis: percentage($col / $grid-columns);

    @if $grid-type == skeleton {
      @if $gutter and unit($gutter) == "%" {
        $flex-basis: $flex-basis - $gutter;
      } @else if $gutter and unitless($gutter) == false {
        $flex-basis: calc(#{$flex-basis} - #{$gutter});
      }
    } @else if $grid-type == margin-offset {
      @if $gutter and unit($gutter) == "%" {
        $flex-basis: (100% - ($gutter * ($grid-columns / $col - 1))) /
          ($grid-columns / $col);
      } @else if $gutter and unitless($gutter) == false {
        $flex-basis: calc(
          #{$flex-basis} -
            #{$gutter *
            ($grid-columns / $col - 1) /
            ($grid-columns / $col)}
        );
      }
    }

    @if $col-offset and unit($col-offset) == "%" {
      $flex-basis: $flex-basis + $col-offset;
    } @else if $col-offset and unitless($col-offset) == false {
      $flex-basis: calc(#{$flex-basis} + #{$col-offset});
    }
  } @else if type-of($col) == number and unitless($col) == false {
    $flex-grow: 0;
    $flex-shrink: 0;
    $flex-basis: $col;
  } @else if type-of($col) == string and $col == "auto" {
    $flex-grow: 1;
    $flex-shrink: 1;
    $flex-basis: auto;
    max-width: 100%;
    width: auto;
    // flex: 1;
  } @else if type-of($col) == string and $col == "equal" {
    $flex-grow: 1;
    $flex-shrink: 1;
    $flex-basis: 0;
    // flex: none;
  } @else if type-of($col) == string and $col == "none" {
    $flex-grow: 0;
    $flex-shrink: 0;
    $flex-basis: auto;
    // flex: initial;
  } @else if type-of($col) == string and $col == "initial" {
    $flex-grow: 0;
    $flex-shrink: 1;
    $flex-basis: auto;
  } @else if type-of($col) == string and $col == "breakpoint" {
    $flex-grow: 0;
    $flex-shrink: 1;
    $flex-basis: auto;
    width: 100%;
  }

  flex-grow: $flex-grow;
  flex-shrink: $flex-shrink;
  flex-basis: $flex-basis;
  max-width: $flex-basis;

  @if $align-self {
    align-self: $align-self;
  }

  @if type-of($order) == number {
    order: $order;
  }

  @if $gutter and unitless($gutter) == false {
    @if $grid-type == skeleton {
      @if $condensed == true {
        @include grid-col-margin($margin: 0 $gutter / 2);
      } @else {
        @include grid-col-margin($margin: 0 $gutter / 2 $gutter);
      }
    } @else if $grid-type == margin-offset {
      @if type-of($col) == string and $col == "breakpoint" {
        @include grid-col-margin($margin-right: 0);
      } @else if $last-child {
        @include grid-col-margin($margin-right: 0);
      } @else {
        @include grid-col-margin($margin-right: $gutter);
      }

      @if $condensed == false {
        @include grid-col-margin($margin-bottom: $gutter);
      }
    }
  }

  @content;
}

@mixin grid-margin(
  $margin: null,
  $margin-top: null,
  $margin-right: null,
  $margin-bottom: null,
  $margin-left: null
) {
  @if $margin != null {
    margin: $margin;
  }
  @if $margin-top != null {
    margin-top: $margin-top;
  }
  @if $margin-bottom != null {
    margin-bottom: $margin-bottom;
  }
  @if $margin-left != null {
    margin-left: $margin-left;
  }
  @if $margin-right != null {
    margin-right: $margin-right;
  }
}

@mixin grid-col-margin(
  $margin: null,
  $margin-top: null,
  $margin-right: null,
  $margin-bottom: null,
  $margin-left: null
) {
  @include grid-margin(
    $margin,
    $margin-top,
    $margin-right,
    $margin-bottom,
    $margin-left
  );
}

// Hide Off Screen
//
// Position an element off-screen for screen-readers.

@mixin hide-off-screen {
  position: absolute;
  left: -10000px;
  top: auto;
  width: 1px;
  height: 1px;
  overflow: hidden;
}

// Position an element vertically and horizontally centered
// Usage: @include absolute-center;
// Note: parent element should use position: relative;
@mixin absolute-center() {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translateX(-50%) translateY(-50%);
}

// Position an element vertically centered
// Usage: @include vertical-center;
// Note: parent element should use position: relative;
@mixin vertical-center() {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
}

// Position an element horizontally centered
// Usage: @include horizontal-center;
// Note: parent element should use position: relative;
@mixin horizontal-center() {
  position: absolute;
  left: 50%;
  transform: translateX(-50%);
}

// Special Underline for inline elements (better than text-decoration: underline)
@mixin underline($bgcolor: get-color(charcoal)) {
  background-image: linear-gradient(to right, $bgcolor 0%, $bgcolor 100%);
  background-repeat: repeat-x;
  background-position: 0 100%;
  background-size: 100% 1px;
}

// Quantity Queries
// Copied from: http://codepen.io/SitePoint/pen/ogaRBG
@mixin quantity-query($number, $comparison: "equal") {
  $nth: "";

  @if index(("greater" "more" ">"), $comparison) {
    $nth: "n + #{$number}";
  } @else if index(("less" "fewer" "<"), $comparison) {
    $nth: "-n + #{$number}";
  } @else if index(("equal" "same" "="), $comparison) {
    $nth: $number;
  } @else {
    @warn "Sorry, that's an invalid $comparison value.";
  }

  &:nth-last-child(#{$nth}):first-child {
    &,
    & ~ * {
      @content;
    }
  }
}

@mixin qq-equal($number) {
  @include quantity-query($number, equal) {
    @content;
  }
}

@mixin qq-greater($number) {
  @include quantity-query($number, greater) {
    @content;
  }
}

@mixin qq-less($number) {
  @include quantity-query($number, less) {
    @content;
  }
}

// Rem output with px fallback
@mixin font-size($sizeValue: 1) {
  font-size: ($sizeValue * 16) * 1px;
  font-size: $sizeValue * 1rem;
}

// Center block
@mixin center-block {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

// Clearfix
@mixin clearfix() {
  content: "";
  display: table;
  table-layout: fixed;
}

// Clear after (not all clearfix need this also)
@mixin clearfix-after() {
  clear: both;
}

// Column width with margin
@mixin column-width($numberColumns: 3) {
  width: map-get($columns, $numberColumns) -
    (($columns__margin * ($numberColumns - 1)) / $numberColumns);
}
